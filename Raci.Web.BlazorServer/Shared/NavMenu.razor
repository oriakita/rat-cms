@using MediatR;
@using Raci.Persistence;
@using Raci.Application.Security.Queries;

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Alan Coffee</a>
    <button class="navbar-toggler">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div>
    @*<ul class="nav flex-column">
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="oi oi-plus" aria-hidden="true"></span> Counter
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="fetchdata">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                </NavLink>
            </li>
        </ul>*@
    <RadzenPanelMenu Style="width:100%">
        @if (_responseDtos.Count > 0)
        {
            @foreach (var group in _responseDtos)
            {
                <RadzenPanelMenuItem Text="@group.DisplayName" Icon="@group.Icon">
                    @foreach (var function in group.Functions)
                    {
                        <RadzenPanelMenuItem Text="@function.Name" Path="@(group.RootPath + function.AbsolutePath)"></RadzenPanelMenuItem>
                    }
                </RadzenPanelMenuItem>

            }
        }

    </RadzenPanelMenu>
</div>

@code {
    [Inject]
    private IMediator _mediator { get; set; }

    [Inject]
    private LoggingUser _loggingUser { get; set; }

    private List<GetLeftSideMenuQuery.ResponseDto>? _responseDtos = new List<GetLeftSideMenuQuery.ResponseDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            //await this._mediator.Send(new GetLoggingUserQuery { });

            _responseDtos = await this._mediator.Send(new GetLeftSideMenuQuery { AccountId = _loggingUser.UserId });

            StateHasChanged();
        }
    }
}
